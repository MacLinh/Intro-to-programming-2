import java.util.NoSuchElementException;

/** Implements the interface <code>FrequencyTable</code> using a
 *  binary search tree.
 *
 * @author Marcel Turcotte (turcott@eecs.uottawa.ca)
 */

public class TreeFrequencyTable implements FrequencyTable {

    // Stores the elements of this binary search tree (frequency
    // table)
    
    private static class Elem {
    
        private String key;
        private long count;
    
        private Elem left;
        private Elem right;
    
        private Elem(String key) {
            this.key = key;
            this.count = 0;
            left = null;
            right = null;
        }
    }

    private Elem root = null; // A reference to the root element
    private int size = 0; // The size of the tree

    /** The size of the frequency table.
     *
     * @return the size of the frequency table
     */
    
    public int size() {
        return size;
    }
  
    /** Creates an entry in the frequency table and initializes its
     *  count to zero.
     *
     * @param key key with which the specified value is to be associated
     */
   private int  threshold = 1, n = 1;
    public void init(String key) {
        size++;
        System.out.println(size+ ", "+threshold);
        if (size == threshold){ 
            Elem oldTop = root;
            root = new Elem(key);
            if (oldTop.key.compareTo(key) < 0) 
                root.left = oldTop;
            else if (oldTop.key.compareTo(key) == 0)
                throw new IllegalArgumentException(key + " already exists");
            else 
                root.right = oldTop;
            threshold += n++;
            
        } else {
            add(key,root);
        } 
        
    }
    
    private void add(String key, Elem e){
        if(root == null) {
            root = new Elem(key); // need to fix 
        }
        else {
            if (key.equals(e.key)) throw new IllegalArgumentException(key + " already exists");
            if (key.compareTo(e.key) < 0) {// less than
                if (e.left == null)
                    e.left = new Elem(key);
                else
                    add(key,e.left);
            }
            else {
                if (e.right == null)
                    e.right = new Elem(key);
                else
                    add(key,e.right);
            }
        }
    }
  
    /** The method updates the frequency associed with the key by one.
     *
     * @param key key with which the specified value is to be associated
     */
  
    public void update(String key) {
       find(key,root).count++;
    }
    private Elem find(String key, Elem e){
        if (e == null) // not found
            throw new NoSuchElementException(key + "doesnt exist");
        if (e.key.equals(key)) // found
            return e;
        if (key.compareTo(e.key) < 0) // less than
            return find(key,e.left);
        else 
            return find(key,e.right); 
        
    }
  
    /**
     * Looks up for key in this TreeFrequencyTable, returns associated value.
     *
     * @param key value to look for
     * @return value the value associated with this key
     * @throws NoSuchElementException if the key is not found
     */
  
    public long get(String key) {
      return find(key,root).count;
    }
  
    /** Returns the list of keys in order, according to the method compareTo of the key
     *  objects.
     *
     *  @return the list of keys in order
     */

    public LinkedList<String> keys() {

 throw new UnsupportedOperationException("IMPLEMENT THIS METHOD");

    }

    /** Returns the values in the order specified by the method compareTo of the key
     *  objects.
     *
     *  @return the values
     */

    public long[] values() {
        return null;
    }

    /** Returns a String representation of the tree.
     *
     * @return a String representation of the tree.
     */

    public String toString() {
        return toString( root );
    }

    // Helper method.
  
    private String toString(Elem current) {
        String s = "";
        if (current == null) {
            return "{}";
        }
        if (current == root)
            s += "root";
        return "{" + toString(current.left) + "[" + current.key +s+ /*"," + current.count + */"]" + toString(current.right) + "}";
    }
    
    public static void main(String [] args){
        TreeFrequencyTable tree = new TreeFrequencyTable();
        for (int i = 0; i < 10; i++){
            tree.init(""+i);
        }
        System.out.println(tree);
    }
  
}
